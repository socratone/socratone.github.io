{"pageProps":{"metadata":{},"htmlContent":"<h1>출석부 개발</h1>\n<p>admin 개발은 이제 능숙하게 할 수 있고 이번에 출석부 admin 페이지를 새로 만들면서<br>\n어떻게 코드를 작성했는지 정리해 두면 후배 개발자나 평가자들에게 도움이 될 것이라 생각한다.<br>\n많은 페이지 중 출석부 상세 페이지 코드에 대해서 다루겠다.<br>\n여러 출석부를 생성할 수 있고 출석부 리스트 페이지에서 각 아이템 링크로 접근할 수 있는 페이지다.<br>\n모든 코드는 제일 아래쪽에서 볼 수 있다.<br>\n위에서부터 아래로 내려가며 하나씩 설명해보겠다.</p>\n<h2>Hooks 순서</h2>\n<h3>Global state</h3>\n<p>AdminAttendanceDetail 컴포넌트 내부의 첫 번째 줄을 보면<br>\n제일 먼저 어쩔 수 없이 넣어야 하는 hook을 두었다.</p>\n<ul>\n<li>react router 5의 history를 쓰기 위해서 useHistory()</li>\n<li>다국어 지원을 위한 react intl의 intl을 쓰기 위해서 useIntl()</li>\n<li>api state를 관리해주는 tanstack qeury(react query)의 queryClient를 쓰기 위해서 useQueryClient()</li>\n<li>url의 query parameter를 가져오기 위해서 useParams()</li>\n</ul>\n<pre><code>const history = useHistory();\nconst intl = useIntl();\nconst queryClient = useQueryClient();\nconst { attendanceBookId } = useParams&#x3C;{ attendanceBookId: string }>();\n</code></pre>\n<p>마치 import 해오듯이 컴포넌트에서 필요한 variable을 가져오는 코드는 제일 위쪽에 두는 게 좋아보인다.<br>\n다음으로 redux나 recoil 등의 global state를 두지만 여기서는 global state를 활용하지 않는다.<br>\n사실 react query가 등장한 이후로 global state를 사용할일이 별로 없어진듯하다.<br>\n만약 넣는다면 <a href=\"https://redux-toolkit.js.org/tutorials/typescript#use-typed-hooks-in-components\">아래와 같은 코드</a>를 넣었을 테다.</p>\n<pre><code>const count = useAppSelector((state) => state.counter.value);\n</code></pre>\n<h3>Local State</h3>\n<p>다음으로는 local state가 온다.</p>\n<p>동료 개발자가 구현한 form 모달을 열고 닫을 수 있는 open state를 뒀다.</p>\n<pre><code>const [isAttendanceBookEditModalOpened, setIsAttendanceBookEditModalOpened] =\n  React.useState(false);\n</code></pre>\n<p>출석부 상세 페이지에는 출석부 구성원 리스트를 보여주는 테이블이 있다.<br>\n페이지 당 10개의 item row를 보여주고 필터링이 가능한데<br>\n10개의 row는 필터링된 구성원 리스트 TODO:</p>\n<pre><code>import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useDebounce, useSearchParam } from 'react-use';\nimport { AttendanceStatus } from '@elice/openapi-client-attendance';\nimport { AttendanceGetSortByEnum } from '@elice/openapi-client-attendance';\nimport {\n  ArrowBackIos as IconArrowBackIos,\n  ArrowForwardIos as IconArrowForwardIos,\n  DateRangeRounded as IconDateRange,\n  Delete as IconDelete,\n  Edit as IconEdit,\n  FileDownload as IconFileDownload,\n  Person as IconPerson,\n  Search as IconSearch,\n} from '@mui/icons-material';\nimport {\n  Breadcrumbs,\n  Button,\n  IconButton,\n  InputAdornment,\n  Link,\n  Paper,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport * as Sentry from '@sentry/react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport dayjs from 'dayjs';\nimport { enqueueSnackbar } from 'notistack';\nimport queryString from 'query-string';\n\nimport { eliceAttendanceAttendanceBookApi } from 'src/api/clientAttendance';\nimport { ADMIN_ATTENDANCE_QUERY_KEYS } from '../ducks/hooks/constants';\nimport useAttendance from '../ducks/hooks/useAttendance';\nimport useAttendanceBook from '../ducks/hooks/useAttendanceBook';\nimport useAttendanceBookDownload from '../ducks/hooks/useAttendanceBookDownload';\nimport useAttendanceCount from '../ducks/hooks/useAttendanceCount';\nimport AttendanceBookFormModal from '../modals/AttendanceBookFormModal';\nimport ConfirmDialog from '../shared/ConfirmDialog';\nimport FilterToggleButtonGroup from '../shared/FilterToggleButtonGroup';\nimport AdminAttendanceDetailTable from './AdminAttendanceDetailTable';\nimport AttendanceInfo from './AttendanceInfo';\n\nimport type { AttendanceGetRequest } from '@elice/openapi-client-attendance';\nimport type { DateValidationError } from '@mui/x-date-pickers';\nimport type { PickerChangeHandlerContext } from '@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.types';\nimport type { Dayjs } from 'dayjs';\n\ntype ConfirmAttendanceDialog = {\n  type: 'delete';\n};\n\nexport type Order = 'asc' | 'desc';\n\nexport enum OrderBy {\n  CheckIn = 'check_in',\n  CheckOut = 'check_out',\n  StaySeconds = 'stay_seconds',\n  FaceDetectedSeconds = 'face_detection_seconds',\n  FaceUndetectedSeconds = 'face_unrecognized_seconds',\n}\n\nconst ROW_COUNT_PER_PAGE = 10;\n\nconst getSortBy = (orderBy: OrderBy | null, order: Order) => {\n  switch (orderBy) {\n    case OrderBy.CheckIn:\n      if (order === 'asc') {\n        return AttendanceGetSortByEnum.CheckInAsc;\n      }\n      return AttendanceGetSortByEnum.CheckInDesc;\n\n    case OrderBy.CheckOut:\n      if (order === 'asc') {\n        return AttendanceGetSortByEnum.CheckOutAsc;\n      }\n      return AttendanceGetSortByEnum.CheckOutDesc;\n\n    case OrderBy.FaceDetectedSeconds:\n      if (order === 'asc') {\n        return AttendanceGetSortByEnum.FaceDetectedSecondsAsc;\n      }\n      return AttendanceGetSortByEnum.FaceDetectedSecondsDesc;\n\n    case OrderBy.FaceUndetectedSeconds:\n      if (order === 'asc') {\n        return AttendanceGetSortByEnum.FaceUndetectedSecondsAsc;\n      }\n      return AttendanceGetSortByEnum.FaceUndetectedSecondsDesc;\n\n    case OrderBy.StaySeconds:\n      if (order === 'asc') {\n        return AttendanceGetSortByEnum.StaySecondsAsc;\n      }\n      return AttendanceGetSortByEnum.StaySecondsDesc;\n\n    default:\n      return undefined;\n  }\n};\n\nconst AdminAttendanceDetail = () => {\n  const history = useHistory();\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n  const { attendanceBookId } = useParams&#x3C;{ attendanceBookId: string }>();\n\n  const [isAttendanceBookEditModalOpened, setIsAttendanceBookEditModalOpened] =\n    React.useState(false);\n\n  const [searchQuery, setSearchQuery] = React.useState(\n    useSearchParam('search') ?? ''\n  );\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = React.useState(\n    useSearchParam('search') ?? ''\n  );\n  const [isSearchQueryChanged, setIsSearchQueryChanged] = React.useState(false);\n  const [page, setPage] = React.useState(Number(useSearchParam('page')) || 1);\n  const [date, setDate] = React.useState&#x3C;Dayjs | null>(\n    dayjs(useSearchParam('date') ?? undefined)\n  );\n  const [attendanceStatus, setAttendanceStatus] =\n    React.useState&#x3C;AttendanceStatus | null>(null);\n\n  // Table order state\n  const [orderBy, setOrderBy] = React.useState&#x3C;OrderBy | null>(null);\n  const [order, setOrder] = React.useState&#x3C;Order>('asc');\n\n  const [confirmDialog, setConfirmDialog] =\n    React.useState&#x3C;ConfirmAttendanceDialog | null>(null);\n\n  // Put undefined if want to clear the query.\n  const changeQueries = (queries: {\n    [key: string]: string | number | undefined;\n  }) => {\n    history.replace({\n      ...history.location,\n      search: queryString.stringify({\n        ...queryString.parse(history.location.search),\n        ...queries,\n      }),\n    });\n  };\n\n  useDebounce(\n    () => {\n      // Prevent changes at initialization\n      if (isSearchQueryChanged) {\n        setDebouncedSearchQuery(searchQuery);\n        setPage(1);\n\n        if (searchQuery.length === 0) {\n          changeQueries({ search: undefined, page: 1 });\n        } else {\n          changeQueries({ search: searchQuery, page: 1 });\n        }\n      }\n    },\n    250,\n    [searchQuery]\n  );\n\n  const { download, isLoading: downloadLoading } = useAttendanceBookDownload({\n    attendanceBookId,\n    beginDate: date,\n    endDate: date,\n  });\n\n  const { data: attendanceBookData } = useAttendanceBook(attendanceBookId);\n\n  // Common params\n  const attendanceParams: Omit&#x3C;AttendanceGetRequest, 'skip' | 'count'> = {\n    filterSearch: debouncedSearchQuery\n      ? `%${debouncedSearchQuery}%`\n      : undefined,\n    filterAttendanceBookId: attendanceBookId,\n    filterDateGe: dayjs(date).format('YYYY-MM-DD'),\n    filterDateLe: dayjs(date).format('YYYY-MM-DD'),\n  };\n\n  // Table row data\n  const { data: attendanceData, isLoading: attendanceLoading } = useAttendance({\n    ...attendanceParams,\n    skip: (page - 1) * ROW_COUNT_PER_PAGE,\n    count: ROW_COUNT_PER_PAGE,\n    filterStatus: attendanceStatus ?? undefined,\n    sortBy: getSortBy(orderBy, order),\n  });\n\n  // Count datas\n  const { data: attendanceAllCountData } = useAttendanceCount(attendanceParams);\n  const { data: attendanceAttendCompletedCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.AttendCompleted,\n  });\n  const { data: attendanceAbsenceCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.Absence,\n  });\n  const { data: attendanceAttendCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.Attend,\n  });\n  const { data: attendanceLatenessCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.Lateness,\n  });\n  const { data: attendanceOthersCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.Others,\n  });\n  const { data: attendanceReadyCountData } = useAttendanceCount({\n    ...attendanceParams,\n    filterStatus: AttendanceStatus.Ready,\n  });\n\n  const refetch = () => {\n    ADMIN_ATTENDANCE_QUERY_KEYS.forEach((queryKey) => {\n      queryClient.invalidateQueries({\n        queryKey: [queryKey],\n      });\n    });\n  };\n\n  const deleteAttendanceBook = async () => {\n    closeConfirmDialog();\n    try {\n      await eliceAttendanceAttendanceBookApi.attendanceBookAttendanceBookIdDelete(\n        {\n          attendanceBookId,\n        }\n      );\n      refetch();\n      history.push(`/admin/attendances`);\n    } catch (error) {\n      Sentry.captureException(error);\n      enqueueSnackbar(\n        intl.formatMessage({ id: 'adminAttendance.error.default' }),\n        {\n          variant: 'error',\n        }\n      );\n    }\n  };\n\n  const increaseDate = () => {\n    if (date) {\n      const addedDate = dayjs(date).add(1, 'day');\n      setDate(addedDate);\n      setPage(1);\n      changeQueries({\n        date: dayjs(addedDate).format('YYYY-MM-DD'),\n        page: 1,\n      });\n    }\n  };\n\n  const decreaseDate = () => {\n    if (date) {\n      const subtractedDate = dayjs(date).subtract(1, 'day');\n      setDate(subtractedDate);\n      setPage(1);\n      changeQueries({\n        date: dayjs(subtractedDate).format('YYYY-MM-DD'),\n        page: 1,\n      });\n    }\n  };\n\n  const getAttendanceCount = () => {\n    switch (attendanceStatus) {\n      // all\n      case null:\n        return attendanceAllCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.AttendCompleted:\n        return attendanceAttendCompletedCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.Absence:\n        return attendanceAbsenceCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.Attend:\n        return attendanceAttendCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.Lateness:\n        return attendanceLatenessCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.Others:\n        return attendanceOthersCountData?.attendanceCount ?? 0;\n\n      case AttendanceStatus.Ready:\n        return attendanceReadyCountData?.attendanceCount ?? 0;\n    }\n  };\n\n  const paginationCount = Math.ceil(getAttendanceCount() / ROW_COUNT_PER_PAGE);\n\n  const getFilterOptionDescription = (count?: number) => {\n    return typeof count === 'number'\n      ? count +\n          intl.formatMessage({\n            id: 'adminAttendance.unit.person',\n          })\n      : '-';\n  };\n\n  const getMinDate = () => {\n    if (!attendanceBookData) {\n      return undefined;\n    }\n\n    return dayjs(attendanceBookData.openSchedule);\n  };\n\n  const getMaxDate = () => {\n    if (!attendanceBookData) {\n      return undefined;\n    }\n\n    const closeSchedule = dayjs(attendanceBookData.closeSchedule).startOf(\n      'day'\n    );\n    const today = dayjs().startOf('day');\n\n    if (closeSchedule.isBefore(today)) {\n      return closeSchedule;\n    }\n\n    return today;\n  };\n\n  const getPreviousDateDisabled = () => {\n    if (!attendanceBookData) {\n      return true;\n    }\n\n    const openSchedule = dayjs(attendanceBookData.openSchedule).startOf('day');\n    const dateWithoutTime = dayjs(date).startOf('day');\n\n    if (\n      dateWithoutTime.isSame(openSchedule) ||\n      dateWithoutTime.isBefore(openSchedule)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const getNextDateDisabled = () => {\n    if (!attendanceBookData) {\n      return true;\n    }\n\n    const closeSchedule = dayjs(attendanceBookData.closeSchedule).startOf(\n      'day'\n    );\n    const dateWithoutTime = dayjs(date).startOf('day');\n    const today = dayjs().startOf('day');\n\n    if (\n      dateWithoutTime.isSame(closeSchedule) ||\n      dateWithoutTime.isAfter(closeSchedule) ||\n      dateWithoutTime.isSame(today) ||\n      dateWithoutTime.isAfter(today)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const attendanceStatusOptions = [\n    {\n      value: '',\n      title: intl.formatMessage({\n        id: 'adminAttendance.detail.filter.attendanceStatus.all',\n      }),\n      description: getFilterOptionDescription(\n        attendanceAllCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.Attend,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.attend',\n      }),\n      description: getFilterOptionDescription(\n        attendanceAttendCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.Ready,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.ready',\n      }),\n      description: getFilterOptionDescription(\n        attendanceReadyCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.AttendCompleted,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.attendCompleted',\n      }),\n      description: getFilterOptionDescription(\n        attendanceAttendCompletedCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.Lateness,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.lateness',\n      }),\n      description: getFilterOptionDescription(\n        attendanceLatenessCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.Others,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.others',\n      }),\n      description: getFilterOptionDescription(\n        attendanceOthersCountData?.attendanceCount\n      ),\n    },\n    {\n      value: AttendanceStatus.Absence,\n      title: intl.formatMessage({\n        id: 'adminAttendance.attendanceStatus.absence',\n      }),\n      description: getFilterOptionDescription(\n        attendanceAbsenceCountData?.attendanceCount\n      ),\n    },\n  ];\n\n  const closeConfirmDialog = () => {\n    setConfirmDialog(null);\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent&#x3C;HTMLInputElement>) => {\n    setIsSearchQueryChanged(true);\n    setSearchQuery(event.target.value);\n  };\n\n  const handleDateChange: (\n    value: dayjs.Dayjs | null,\n    context: PickerChangeHandlerContext&#x3C;DateValidationError>\n  ) => void = (value) => {\n    if (value) {\n      setDate(value);\n      setPage(1);\n      changeQueries({ date: value.format('YYYY-MM-DD'), page: 1 });\n    }\n  };\n\n  const handleAttendanceEditButtonClick = () => {\n    setIsAttendanceBookEditModalOpened(true);\n  };\n\n  const handleAttendanceDeleteButtonClick = () => {\n    setConfirmDialog({\n      type: 'delete',\n    });\n  };\n\n  const handleFilterChange = (\n    _: React.MouseEvent&#x3C;HTMLElement>,\n    attendanceStatus: AttendanceStatus | ''\n  ) => {\n    setPage(1);\n    changeQueries({ page: 1 });\n    setAttendanceStatus(attendanceStatus || null);\n  };\n\n  const handlePageChange = (page: number) => {\n    setPage(page);\n    changeQueries({ page });\n  };\n\n  const handleOrderByChange = (requestedOrderBy: OrderBy) => {\n    const isAsc = orderBy === requestedOrderBy &#x26;&#x26; order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(requestedOrderBy);\n  };\n\n  const handleMemberManageButtonClick = () => {\n    history.push(`/admin/attendances/${attendanceBookId}/users`);\n  };\n\n  return (\n    &#x3C;>\n      &#x3C;Paper elevation={0} sx={{ padding: '1.5rem', borderRadius: '1rem' }}>\n        &#x3C;Stack spacing=\"1.5rem\">\n          {/* header */}\n          &#x3C;Stack\n            component=\"header\"\n            direction=\"row\"\n            gap=\"0.5rem\"\n            flexWrap=\"wrap\"\n            justifyContent=\"space-between\"\n          >\n            &#x3C;Stack spacing=\"0.5rem\">\n              &#x3C;Breadcrumbs aria-label=\"breadcrumb\">\n                &#x3C;Link\n                  underline=\"hover\"\n                  color=\"inherit\"\n                  onClick={() => history.push('/admin')}\n                >\n                  &#x3C;FormattedMessage id=\"adminAttendance.detail.breadcrumbs.organizationManagement\" />\n                &#x3C;/Link>\n                &#x3C;Link\n                  underline=\"hover\"\n                  color=\"inherit\"\n                  onClick={() => history.push('/admin/attendances')}\n                >\n                  &#x3C;FormattedMessage id=\"adminAttendance.detail.breadcrumbs.attendanceBook\" />\n                &#x3C;/Link>\n                &#x3C;Typography color=\"text.primary\" fontWeight={700}>\n                  {attendanceBookData?.title ?? '-'}\n                &#x3C;/Typography>\n              &#x3C;/Breadcrumbs>\n              &#x3C;Typography component=\"h2\" variant=\"h6\">\n                {attendanceBookData?.title ?? '-'}\n              &#x3C;/Typography>\n            &#x3C;/Stack>\n            &#x3C;Stack direction=\"row\" gap=\"0.5rem\" flexWrap=\"wrap\">\n              &#x3C;Button\n                color=\"neutral\"\n                variant=\"contained\"\n                startIcon={&#x3C;IconDelete />}\n                onClick={handleAttendanceDeleteButtonClick}\n              >\n                &#x3C;FormattedMessage id=\"adminAttendance.detail.buttons.deleteAttendanceBook\" />\n              &#x3C;/Button>\n              &#x3C;Button\n                color=\"neutral\"\n                variant=\"contained\"\n                startIcon={&#x3C;IconEdit />}\n                onClick={handleAttendanceEditButtonClick}\n              >\n                &#x3C;FormattedMessage id=\"adminAttendance.detail.buttons.editAttendanceBook\" />\n              &#x3C;/Button>\n            &#x3C;/Stack>\n          &#x3C;/Stack>\n\n          &#x3C;AttendanceInfo attendanceBookId={attendanceBookId} />\n\n          &#x3C;Stack spacing=\"1rem\">\n            {/* toolbar */}\n            &#x3C;Stack spacing=\"0.5rem\">\n              &#x3C;Typography\n                component=\"h3\"\n                variant=\"body1\"\n                color={(theme) => theme.palette.text.secondary}\n                fontWeight={700}\n              >\n                &#x3C;FormattedMessage id=\"adminAttendance.detail.subtitle.memberAttendanceStatus\" />\n              &#x3C;/Typography>\n\n              &#x3C;Stack direction=\"row\" flexWrap=\"wrap\" gap=\"1rem\">\n                &#x3C;TextField\n                  value={searchQuery}\n                  onChange={handleSearchChange}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  placeholder={intl.formatMessage({\n                    id: 'adminAttendance.detail.textField.search.placeholder',\n                  })}\n                  InputProps={{\n                    endAdornment: (\n                      &#x3C;InputAdornment position=\"end\">\n                        &#x3C;IconSearch />\n                      &#x3C;/InputAdornment>\n                    ),\n                  }}\n                  sx={{\n                    '.MuiInputBase-root': {\n                      width: '15.625rem',\n                    },\n                  }}\n                />\n                &#x3C;Stack direction=\"row\" alignItems=\"center\">\n                  &#x3C;LocalizationProvider\n                    dateAdapter={AdapterDayjs}\n                    adapterLocale={intl.locale}\n                  >\n                    &#x3C;DatePicker\n                      value={date}\n                      onChange={handleDateChange}\n                      slots={{ openPickerIcon: IconDateRange }}\n                      slotProps={{\n                        textField: {\n                          required: true,\n                          size: 'small',\n                        },\n                      }}\n                      minDate={getMinDate()}\n                      maxDate={getMaxDate()}\n                      sx={{\n                        marginRight: '0.5rem',\n                      }}\n                    />\n                  &#x3C;/LocalizationProvider>\n                  &#x3C;IconButton\n                    sx={{ flexShrink: 0 }}\n                    size=\"small\"\n                    disabled={getPreviousDateDisabled()}\n                    onClick={decreaseDate}\n                  >\n                    &#x3C;IconArrowBackIos />\n                  &#x3C;/IconButton>\n                  &#x3C;IconButton\n                    sx={{ flexShrink: 0 }}\n                    size=\"small\"\n                    disabled={getNextDateDisabled()}\n                    onClick={increaseDate}\n                  >\n                    &#x3C;IconArrowForwardIos />\n                  &#x3C;/IconButton>\n                &#x3C;/Stack>\n                &#x3C;Stack\n                  direction=\"row\"\n                  gap={1}\n                  flexWrap=\"wrap\"\n                  sx={{ marginLeft: 'auto' }}\n                >\n                  &#x3C;Button\n                    color=\"neutral\"\n                    startIcon={&#x3C;IconPerson />}\n                    onClick={handleMemberManageButtonClick}\n                  >\n                    &#x3C;FormattedMessage id=\"adminAttendance.detail.buttons.memberManagement\" />\n                  &#x3C;/Button>\n                  &#x3C;Button\n                    startIcon={&#x3C;IconFileDownload />}\n                    onClick={download}\n                    disabled={downloadLoading}\n                  >\n                    &#x3C;FormattedMessage id=\"adminAttendance.detail.buttons.downloadAttendanceBook\" />\n                  &#x3C;/Button>\n                &#x3C;/Stack>\n              &#x3C;/Stack>\n            &#x3C;/Stack>\n\n            {/* attendance status filters */}\n            &#x3C;FilterToggleButtonGroup\n              value={attendanceStatus ?? ''}\n              options={attendanceStatusOptions}\n              onChange={handleFilterChange}\n            />\n\n            {/* table */}\n            &#x3C;AdminAttendanceDetailTable\n              rows={attendanceData}\n              isLoading={attendanceLoading}\n              isEmpty={\n                attendanceData?.length === 0 &#x26;&#x26; !Boolean(debouncedSearchQuery)\n              }\n              isFaceDetection={attendanceBookData?.faceDetection.enabled}\n              isSearchEmpty={\n                attendanceData?.length === 0 &#x26;&#x26; Boolean(debouncedSearchQuery)\n              }\n              order={order}\n              orderBy={orderBy}\n              paginationCount={paginationCount}\n              page={page}\n              onPageChange={handlePageChange}\n              onOrderByChange={handleOrderByChange}\n            />\n          &#x3C;/Stack>\n        &#x3C;/Stack>\n      &#x3C;/Paper>\n\n      {/* modals */}\n\n      &#x3C;AttendanceBookFormModal\n        open={isAttendanceBookEditModalOpened}\n        attendanceBookId={attendanceBookId}\n        onCloseModal={() => setIsAttendanceBookEditModalOpened(false)}\n      />\n\n      {/* dialogs */}\n\n      &#x3C;ConfirmDialog\n        open={confirmDialog?.type === 'delete'}\n        title={intl.formatMessage({\n          id: 'adminAttendance.detail.confirmDialog.delete.title',\n        })}\n        description={intl.formatMessage({\n          id: 'adminAttendance.detail.confirmDialog.delete.description',\n        })}\n        cancelLabel={intl.formatMessage({\n          id: 'adminAttendance.detail.confirmDialog.delete.cancel',\n        })}\n        submitLabel={intl.formatMessage({\n          id: 'adminAttendance.detail.confirmDialog.delete.submit',\n        })}\n        submitButtonColor=\"error\"\n        onClose={closeConfirmDialog}\n        onSubmit={deleteAttendanceBook}\n      />\n    &#x3C;/>\n  );\n};\n\nexport default AdminAttendanceDetail;\n</code></pre>\n"},"__N_SSG":true}